# This is an autogenerated function, ported from the original legacy version.
# It /should work/ as is, but will not have all the benefits of the modern
# function API. You should see the function docs to learn how to add function
# signatures for type safety and to document this function using puppet-strings.
#
# https://puppet.com/docs/puppet/latest/custom_functions_ruby.html
#
# ---- original file header ----
#
# apparmor puppet module
# https://github.com/artem-sidorenko/puppet-apparmor
#
# Author Artem Sidorenko artem@2realities.com
#
# Copyright 2014 Artem Sidorenko and contributors.
# Copyright 2014 Deutsche Telekom AG
# See the COPYRIGHT file at the top-level directory of this distribution
# and at https://github.com/artem-sidorenko/puppet-apparmor/blob/master/COPYRIGHT
#

#
# apparmor_normalize_name(name)
#
# Function takes the name as a path (e.g. /usr/bin/ping) and converts it
# to the apparmor valid profile name (e.g. usr.bin.ping)
#
# This function is usefull for deployment of new or custom profiles
#
# ---- original file header ----
#
# @summary
#   Converts the path to the apparmor profile name
#
#
Puppet::Functions.create_function(:'apparmor_normalize_name') do
  # @param args
  #   The original array of arguments. Port this to individually managed params
  #   to get the full benefit of the modern function API.
  #
  # @return [Data type]
  #   Describe what the function returns here
  #
  dispatch :default_impl do
    # Call the method named 'default_impl' when this is matched
    # Port this to match individual params for better type safety
    repeated_param 'Any', :args
  end


  def default_impl(*args)
    

    raise(Puppet::ParseError, "apparmor_normalize_name(): wrong number of arguments " +
"given (#{args.size} for 1)") if args.size != 1

    path = args[0]

    raise(Puppet::ParseError, "apparmor_normalize_name(): first argument should be a string") if !path.is_a?(String)

    profile_name = path.gsub(/^\//,"")
    profile_name.gsub!("/",".")

    return profile_name

  
  end
end
